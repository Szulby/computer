// load stos, local and arg into ram
@256
d=a 
@sp
m=d
@300
d=a
@lcl
m=d
@400
d=a
@arg
m=d

// push constant 2
@2
D=A
@sp
a=m
m=d
@sp
m=m+1

// push constant 3
@3
D=A
@sp
a=m
m=d
@sp
m=m+1

// push constant 4
@4
D=A
@sp
a=m
m=d
@sp
m=m+1

// push local 1
@lcl
d=m
@1
a=d+a
d=m
@sp
a=m
m=d
@sp
m=m+1

// function caller infinite
// push return adress to stack
@infinite.ret.0.3196649638506479
d=a
@sp
a=m
m=d
@sp
m=m+1
// push local, arg, this, that offset to stack
@LCL
D=M
@sp
a=m
m=d
@sp
m=m+1

@ARG
D=M
@sp
a=m
m=d
@sp
m=m+1

@THIS
D=M
@sp
a=m
m=d
@sp
m=m+1

@THAT
D=M
@sp
a=m
m=d
@sp
m=m+1

// set new arg
@SP
D=M
@7
D=D-A
@ARG
M=D

// Ustawienie LCL na pozycjÄ™ SP
@SP
D=M
@LCL
M=D

// jump to function
@infinite
0;jmp
// create alias for return flow
(infinite.ret.0.3196649638506479)

// function crete mult
(mult)


// function return
@sp
am=m-1
d=m
@r14
am=d
0;jmp

// function crete infinite
(infinite)


// label end
(end)  

// go-to
@end
0;jmp  

// function return
@sp
am=m-1
d=m
@r14
am=d
0;jmp