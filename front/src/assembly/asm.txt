// load stos, local and arg into ram
@256
d=a 
@sp
m=d
@300
d=a
@lcl
m=d
@400
d=a
@arg
m=d

// push constant 2
@2
D=A
@sp
a=m
m=d
@sp
m=m+1

// push constant 3
@3
D=A
@sp
a=m
m=d
@sp
m=m+1

// push constant 4
@4
D=A
@sp
a=m
m=d
@sp
m=m+1

// function caller add
// push return adress to stack
@add.ret.0.25488071961130343
d=a
@sp
a=m
m=d
@sp
m=m+1
// push local, arg, this, that offset to stack
@LCL
D=M
@sp
a=m
m=d
@sp
m=m+1

@ARG
D=M
@sp
a=m
m=d
@sp
m=m+1

@THIS
D=M
@sp
a=m
m=d
@sp
m=m+1

@THAT
D=M
@sp
a=m
m=d
@sp
m=m+1

// set new arg
@SP
D=M
@7
D=D-A
@ARG
M=D

// Ustawienie LCL na pozycję SP
@SP
D=M
@LCL
M=D

// jump to function
@add
0;jmp
// create alias for return flow
(add.ret.0.25488071961130343)

// function caller infinite
// push return adress to stack
@infinite.ret.0.6317507418217359
d=a
@sp
a=m
m=d
@sp
m=m+1
// push local, arg, this, that offset to stack
@LCL
D=M
@sp
a=m
m=d
@sp
m=m+1

@ARG
D=M
@sp
a=m
m=d
@sp
m=m+1

@THIS
D=M
@sp
a=m
m=d
@sp
m=m+1

@THAT
D=M
@sp
a=m
m=d
@sp
m=m+1

// set new arg
@SP
D=M
@7
D=D-A
@ARG
M=D

// Ustawienie LCL na pozycję SP
@SP
D=M
@LCL
M=D

// jump to function
@infinite
0;jmp
// create alias for return flow
(infinite.ret.0.6317507418217359)

// function crete add
(add)


// push argument 0
@arg
d=m
@0
a=d+a
d=m
@sp
a=m
m=d
@sp
m=m+1

// push argument 1
@arg
d=m
@1
a=d+a
d=m
@sp
a=m
m=d
@sp
m=m+1

// add
@SP
am=m-1
d=m
@sp
am=m-1
d=d+m
@sp
a=m
m=d
@sp
m=m+1

// function return

// // Przywrócenie wartości wyniku do segmentu lokalnego 0
// @SP
// A=M-1
// D=M
// @LCL
// A=M 
// M=D

// local to r13
@LCL
D=M
@R13
M=D

// save return stack addres to r14
@lcl
d=m
@5
d=d-a
@r14
m=d

// set local 0 to arg 0
@SP
A=M-1
D=M
@ARG
A=M
M=D

// 4. SP = ARG + 1
@ARG
D=M+1
@SP
M=D

// 7. ARG 
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D

// 8. LCL
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
//  goto RET
@R14
A=M
a=m
0;JMP

// function crete infinite
(infinite)


// label end
(end)  

// go-to
@end
0;jmp  

// function return

// // Przywrócenie wartości wyniku do segmentu lokalnego 0
// @SP
// A=M-1
// D=M
// @LCL
// A=M 
// M=D

// local to r13
@LCL
D=M
@R13
M=D

// save return stack addres to r14
@lcl
d=m
@5
d=d-a
@r14
m=d

// set local 0 to arg 0
@SP
A=M-1
D=M
@ARG
A=M
M=D

// 4. SP = ARG + 1
@ARG
D=M+1
@SP
M=D

// 7. ARG 
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D

// 8. LCL
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
//  goto RET
@R14
A=M
a=m
0;JMP